rules_version = '2';

function isOwner(owner, userId) {
   return path('/databases/(default)/documents/users/' + userId) == owner;
}

function isParticipant(participants, userId) {
    return path('/databases/(default)/documents/users/' + userId) in participants;
}

function onlyFields(request, resource, list) {
    return request.resource.data.diff(resource.data).affectedKeys().hasAny(list)
}

service cloud.firestore {
  match /databases/{database}/documents {
    // TODOS
    match /todos/{document=**} {
        allow read:  if request.auth != null && isOwner(resource.data.owner,request.auth.uid)
        allow write: if request.auth != null && isOwner(request.resource.data.owner,request.auth.uid)
    }
    
    match /questionare/{document=**} {
        allow read: if request.auth != null
        allow write: if request.auth != null && isOwner(request.resource.data.user,request.auth.uid)
    }
    
    match /users/{document=**} {
        allow create:if request.auth != null
        allow read, update: if request.auth != null && request.auth.token.email == resource.data.email
    }
    
    match /courses/{document=**} {
        allow read: if request.auth != null
      allow create: if request.auth != null && isOwner(request.resource.data.creator, request.auth.uid)
        allow update: if request.auth != null && ((isOwner(resource.data.creator, request.auth.uid) && onlyFields(request, resource, ['creator', 'participants'])) || onlyFields(request, resource, ['participants']))
    }
    
    match /card-streaks/{document=**} {
       allow read, write: if request.auth.uid != null
    }

    match /index-cards/{document=**} {
        allow read: if request.auth != null
        allow write: if request.auth != null //&& isOwner(get(/databases/$(database)/documents/$(request.resource.data.course.path)).data.creator, request.auth.uid)
    }
    
    match /feedbacks/{document=**} {
        allow read: if request.auth != null //&& isOwner(get(/databases/$(database)/documents/$(resource.data.course.path)).data.creator, request.auth.uid)
      allow write: if request.auth != null //&& isParticipant(get(/databases/$(database)/documents/$(resource.data.course)).data.participants, request.auth.uid)
    }
    
    match /exams/{document=**} {
        allow read,write: if request.auth != null
    }
     match /files/{document=**} {
        allow read,write: if request.auth != null
    }
  }
}